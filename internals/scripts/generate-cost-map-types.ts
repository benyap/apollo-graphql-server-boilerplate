import chalk from 'chalk';
import fs from 'fs';
import * as sh from 'shelljs';

import * as types from '../../src/graphql/types';

// tslint:disable:no-console
const log = console.log;

const COST_MAP_TYPES_FILE = 'src/graphql/cost/types.d.ts';
const RESOLVER_POSTFIX = 'Resolvers';

const ROOT_INTERFACES = new Set([
  'QueryResolvers',
  'MutationResolvers',
  'SubscriptionResolvers',
]);

const COST_MAP_FIELD_DEFINITION = `
export interface CostMapField {
  complexity?: number;
  multipliers?: string[];
  useMultipliers?: boolean;
}
`;

const COST_MAP_TYPES_TEMPLATE = `
import {
$1
} from '../types';
${COST_MAP_FIELD_DEFINITION}
/**
 * The cost map type can contain all fields that are available
 * through the GraphQL schema. All new object types must be added
 * here as a \`Custom Type\`.
 *
 * This is auto-generated, DO NOT EDIT.
 */
type CostMap = Partial<{
// Root fields
$2
// Custom Types
$3
}>;
`;

/**
 * This script generates the typings for a Cost Map,
 * based on the GraphQL Schema.
 *
 * It uses types generated by `graphqlgen` to determine
 * the fields required in the cost map.
 */
const generateCostMapTypes = () => {
  log(chalk.blue(`Generating Cost Map types...`));

  const imports = [];
  const rootFields = [];
  const customTypes = [];

  for (const type of Object.keys(types)) {
    const typeName = type.replace(RESOLVER_POSTFIX, '');
    imports.push(`  ${type},`);
    if (ROOT_INTERFACES.has(type)) {
      // Add root field
      rootFields.push(
        `  ${typeName}: Partial<{ [field in keyof ${type}.Type]: CostMapField }>;`,
      );
    } else {
      // Add custom field
      customTypes.push(
        `  ${typeName}: Partial<{ [field in keyof ${type}.Type]: CostMapField }>;`,
      );
    }
  }

  const typings = COST_MAP_TYPES_TEMPLATE.replace('$1', imports.join('\n'))
    .replace('$2', rootFields.join('\n'))
    .replace('$3', customTypes.join('\n'));

  log(
    chalk.dim(
      `Generated Cost Map with the following types:
  * ${Object.keys(types).join('\n  * ')}`,
    ),
  );

  if (fs.existsSync(COST_MAP_TYPES_FILE)) {
    log(
      chalk.dim(
        `Backing up previous cost map types file to '${COST_MAP_TYPES_FILE}.old'...`,
      ),
    );
    fs.copyFileSync(COST_MAP_TYPES_FILE, `${COST_MAP_TYPES_FILE}.old`);
  }

  log(chalk.dim(`Writing types to '${COST_MAP_TYPES_FILE}'...`));
  fs.writeFileSync(COST_MAP_TYPES_FILE, typings);

  log(chalk.dim(`Prettifying...`));
  sh.exec(`yarn prettify ${COST_MAP_TYPES_FILE}`);

  log(chalk.blue(`Generated Cost Map types.`));
};

export default generateCostMapTypes;
